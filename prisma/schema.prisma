// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Authentication

enum UserRole {
  ADMIN
  DOCTOR
  USER
}

enum USER_GENDER {
  MALE
  FEMALE
}

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  emailVerified         DateTime?
  phone                 String?
  gender                USER_GENDER            @default(MALE)
  image                 String                 @default("/images/default.jpg")
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  sessions              Sessions[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  DoctorData            DoctorData?
  notificationSent      Notification[]         @relation(name: "sender")
  notificationReceived  Notification[]         @relation(name: "receiver")
}

enum Notification_Status {
  READ
  NEW
}

model Notification {
  id         String              @id @default(cuid())
  message    String
  link       String?
  status     Notification_Status
  senderId   String // Store the ID of the sender user
  receiverId String // Store the ID of the receiver user
  sender     User                @relation(name: "sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User                @relation(name: "receiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

enum DoctorRank {
  BRONSE
  SILVER
  GOLD
  PLATINIUM
}

model DoctorData {
  id             String          @id
  breif          String
  certificate    String
  article        String
  country        String
  doctorRank     DoctorRank      @default(BRONSE)
  doctorDiscount Int             @default(0)
  masterId       String?
  master         Master?         @relation(fields: [masterId], references: [id], onDelete: Cascade)
  doctorId       String          @unique
  doctor         User            @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  Rate           Rate[]
  moneyRequests  MoneyRequest[]
  coupons        Coupon[]
  money          DoctorMoney?
  doctorActive   DoctorActive?
  doctorSessions DoctorSessions?
}

enum Money_Request_Status {
  DONE
  WAITING
  CANCELLED
}

model MoneyRequest {
  id       String               @id @default(uuid())
  money    Float
  status   Money_Request_Status @default(WAITING)
  date     DateTime
  doctorId String
  doctor   DoctorData           @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model DoctorMoney {
  id       String     @id @default(uuid())
  pending  Float      @default(0.00)
  ready    Float      @default(0.00)
  doctorId String     @unique
  doctor   DoctorData @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model DoctorActive {
  id       String     @id @default(uuid())
  isActive Boolean    @default(false)
  from     String     @default("00:00")
  to       String     @default("00:00")
  doctorId String     @unique
  doctor   DoctorData @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

enum Session_Time {
  HALF
  HOUR
}

model DoctorSessions {
  id           String     @id @default(uuid())
  halfSessions Float      @default(0.00)
  hourSessions Float      @default(0.00)
  twoSessions  Float      @default(0.00)
  fourSessions Float      @default(0.00)
  doctorId     String     @unique
  doctor       DoctorData @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Sessions {
  id     String       @id @default(uuid())
  price  String
  time   Session_Time
  link   String
  userId String
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Admin

model Master {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  DoctorData  DoctorData[]
}

enum CouponType {
  PERMANENT
  LIMITED
}

enum DiscountType {
  PERCENT
  VALUE
}

model Coupon {
  id            String       @id @default(cuid())
  coupon        String       @unique
  type          CouponType   @default(PERMANENT)
  discountType  DiscountType @default(VALUE)
  discountValue Int
  from          DateTime?
  to            DateTime?
  useTimes      String
  doctorId      String?
  doctor        DoctorData?  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Rate {
  id          String     @id @default(cuid())
  message     String
  rateValue   Int
  patientName String
  doctorId    String
  doctor      DoctorData @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}
