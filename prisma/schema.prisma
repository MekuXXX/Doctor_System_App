// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

// Authentication

enum UserRole {
  ADMIN
  DOCTOR
  USER
}

enum USER_GENDER {
  MALE
  FEMALE
}

model User {
  id                    String                 @id @default(cuid())
  name                  String
  email                 String                 @unique
  emailVerified         DateTime?
  phone                 String?
  image                 String                 @default("/images/default.jpg")
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  newNotifications      Int                    @default(0)
  gender                USER_GENDER            @default(MALE)
  role                  UserRole               @default(USER)
  accounts              Account[]
  sessions              Session[]
  twoFactorConfirmation TwoFactorConfirmation?
  DoctorData            DoctorData?
  notifications         Notification[]
  userPackage           UserPackage[]
  conversations         Conversation[]
  messages              Message[]
}

model DoctorData {
  id             String          @id
  breif          String
  certificate    String
  article        String
  country        String
  doctorRank     DoctorRank      @default(BRONSE)
  doctorDiscount Int             @default(0)
  masterId       String?
  master         Master?         @relation(fields: [masterId], references: [id], onDelete: Cascade)
  doctorId       String          @unique
  doctor         User            @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  Rate           Rate[]
  moneyRequests  MoneyRequest[]
  coupons        Coupon[]
  money          DoctorMoney?
  doctorActive   DoctorActive?
  doctorSessions DoctorSessions?
  doctorSchedule Schedule[]
  paymentLink    PaymentLink[]
  // DoctorPakage   DoctorPackage[]
  paidPackages   UserPackage[]
  sessions       Session[]
}

model Session {
  id              String        @id @default(uuid())
  status          SessionStatus @default(WAITING_PAY)
  type            SessionType
  link            String
  doctorPrice     Float
  sessionPrice    Float
  patientPrice    Float
  date            DateTime
  coupon          String?
  paymentIntentId String        @unique
  userId          String?
  user            User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctorId        String
  doctor          DoctorData    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  WAITING_PAY
  PAID
}

model UserPackage {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctorId      String
  doctor        DoctorData    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  status        PaymentStatus
  type          SessionType
  doctorPrice   Float
  patientPrice  Float
  sessionPrice  Float
  paymentIntent String        @unique
  remain        Int
  coupon        String?
  validUntil    DateTime
}

// model DoctorPackage {
//   id            String        @id @default(cuid())
//   paymentIntent String        @unique
//   status        PaymentStatus @default(WAITING_PAY)
//   number        Int
//   type          SessionType
//   price         Float
//   coupon        String?
//   doctorId      String
//   doctor        DoctorData    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
// }

model Notification {
  id      String  @id @default(cuid())
  name    String
  image   String
  message String
  date    String
  link    String?
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum DoctorRank {
  BRONSE
  SILVER
  GOLD
  PLATINIUM
}

model PaymentLink {
  id          String        @id @default(cuid())
  date        DateTime
  time        String
  customPrice Float
  doctorPrice Float
  token       String        @unique
  sessionType SessionType
  doctorId    String
  status      PaymentStatus @default(WAITING_PAY)
  doctor      DoctorData    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Schedule {
  id             String                  @id @default(cuid())
  doctorTimeZone String
  dayOfWeek      DayOfWeek
  sessions       DoctorScheduleSession[]
  doctorId       String
  doctor         DoctorData              @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model DoctorScheduleSession {
  id           String      @id @default(cuid())
  sessionType  SessionType
  sessionTime  String
  sessionPrice Float
  schedule     Schedule    @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  scheduleId   String
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum SessionType {
  HALF_HOUR
  HOUR
}

enum Money_Request_Status {
  DONE
  WAITING
  CANCELLED
}

model MoneyRequest {
  id       String               @id @default(uuid())
  money    Float
  status   Money_Request_Status @default(WAITING)
  date     DateTime
  doctorId String
  doctor   DoctorData           @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model DoctorMoney {
  id       String     @id @default(uuid())
  pending  Float      @default(0.00)
  ready    Float      @default(0.00)
  doctorId String     @unique
  doctor   DoctorData @relation(fields: [doctorId], references: [id])
}

model DoctorActive {
  id       String     @id @default(uuid())
  isActive Boolean    @default(false)
  from     String     @default("00:00")
  to       String     @default("00:00")
  doctorId String     @unique
  doctor   DoctorData @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model DoctorSessions {
  id           String     @id @default(uuid())
  halfSessions Float      @default(0.00)
  hourSessions Float      @default(0.00)
  halfPackage  Float      @default(0.00)
  hourPackage  Float      @default(0.00)
  doctorId     String     @unique
  doctor       DoctorData @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Conversation {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())

  messages Message[]

  users User[]
}

model Message {
  id        String   @id @default(cuid())
  body      String?
  image     String?
  createdAt DateTime @default(now())

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

enum SessionStatus {
  WAITING
  DONE
  CANCELLED
  CANCELLED_DONE
  RESERVED
  WAITING_PAY
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// Admin

model Master {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  DoctorData  DoctorData[]
}

enum CouponType {
  PERMANENT
  LIMITED
}

enum DiscountType {
  PERCENT
  VALUE
}

model Coupon {
  id            String       @id @default(cuid())
  coupon        String       @unique
  type          CouponType   @default(PERMANENT)
  discountType  DiscountType @default(VALUE)
  discountValue Int
  from          DateTime?
  to            DateTime?
  useTimes      String
  doctorId      String?
  usage         Int          @default(0)
  doctor        DoctorData?  @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Rate {
  id          String     @id @default(cuid())
  message     String
  rateValue   Int
  patientName String
  doctorId    String
  doctor      DoctorData @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}
